pragma Ada_2012;
with Ada.Text_IO;         use Ada.Text_IO;
with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;
package body Grille is

   ----------------------
   -- ConstruireGrille --
   ----------------------

   function ConstruireGrille
     (Nbl : in Integer; Nbc : in Integer) return Type_Grille
   is
      G : Type_Grille;
   begin
      if Nbl > TAILLE_MAX or Nbl < 1 then
         raise TAILLE_INVALIDE;
      elsif Nbc > TAILLE_MAX or Nbc < 1 then
         raise TAILLE_INVALIDE;
      end if;
      G.nbl := Nbl;
      G.nbc := Nbc;
      for I in 1 .. Nbl loop
         for J in 1 .. Nbc loop
            G.g (I, J) := ConstruireCase (ConstruireCoordonnees (I, J));
         end loop;
      end loop;

      return G;
   end ConstruireGrille;

   --------------
   -- nbLignes --
   --------------

   function NbLignes (G : Type_Grille) return Integer is
   begin
      return G.nbl;
   end NbLignes;

   ----------------
   -- nbColonnes --
   ----------------

   function NbColonnes (G : Type_Grille) return Integer is
   begin
      return G.nbc;
   end NbColonnes;

   -------------------
   -- estGrilleVide --
   -------------------

   function EstGrilleVide (G : in Type_Grille) return Boolean is
   begin
      for I in 1 .. NbLignes (G) loop
         for J in 1 .. NbColonnes (G) loop
            if estIle (ObtenirTypeCase (G.g (I, J))) then
               return False;
            end if;
         end loop;
      end loop;
      return True;
   end EstGrilleVide;

   -----------------
   -- estComplete --
   -----------------

   function EstComplete (G : in Type_Grille) return Boolean is
   begin
      return nbIle (G) = nbIleCompletes (G) and not EstGrilleVide (G);
   end EstComplete;

   -----------
   -- nbIle --
   -----------

   function NbIle (G : in Type_Grille) return Integer is
      Resultat : Integer := 0;
   begin
      if EstGrilleVide (G) then
         return Resultat;
      else

         for I in 1 .. NbLignes (G) loop
            for J in 1 .. NbColonnes (G) loop
               if estIle (ObtenirTypeCase (G.g (I, J))) then
                  Resultat := Resultat + 1;

               end if;
            end loop;
         end loop;
         return Resultat;
      end if;
   end NbIle;

   --------------------
   -- nbIleCompletes --
   --------------------

   function NbIleCompletes (G : in Type_Grille) return Integer is
      Resultat : Integer := 0;
   begin
      if EstGrilleVide (G) then
         return Resultat;
      end if;
      for I in 1 .. NbLignes (G) loop
         for J in 1 .. NbColonnes (G) loop
            if estIle (ObtenirTypeCase (G.g (I, J)))
              and then estIleComplete (ObtenirIle (G.g (I, J)))
            then

               Resultat := Resultat + 1;
            end if;
         end loop;
      end loop;

      return Resultat;
   end NbIleCompletes;

   -----------------
   -- ObtenirCase --
   -----------------

   function ObtenirCase
     (G : in Type_Grille; Co : in Type_Coordonnee) return Type_CaseHashi
   is
   begin

      return G.g (ObtenirLigne (Co), ObtenirColonne (Co));
   end ObtenirCase;

   ----------------
   -- aUnSuivant --
   ----------------

   function AUnSuivant
     (G : in Type_Grille; C : in Type_CaseHashi; O : Type_Orientation)
      return Boolean
   is
   begin
      if ValeurOrientation (O) mod 2 = 0 then

         return
           ObtenirColonne (ObtenirCoordonnee (C)) -
           ValeurOrientation (O) / 2 <=
           NbColonnes (G) and
           ObtenirColonne (ObtenirCoordonnee (C)) - ValeurOrientation (O) / 2 >
             0;
      else
         return
           ObtenirLigne (ObtenirCoordonnee (C)) + ValeurOrientation (O) <=
           NbLignes (G) and
           ObtenirLigne (ObtenirCoordonnee (C)) + ValeurOrientation (O) > 0;
      end if;
   end AUnSuivant;

   --------------------
   -- obtenirSuivant --
   --------------------

   function ObtenirSuivant
     (G : in Type_Grille; C : in Type_CaseHashi; O : Type_Orientation)
      return Type_CaseHashi
   is
   begin
      if not (AUnSuivant (G, C, O)) then
         raise PAS_DE_SUIVANT;
      else
         if ValeurOrientation (O) mod 2 = 0 then
            return
              ObtenirCase
                (G,
                 ConstruireCoordonnees
                   (ObtenirLigne (ObtenirCoordonnee (C)),
                    ObtenirColonne (ObtenirCoordonnee (C)) -
                    ValeurOrientation (O) / 2));
         else
            return
              ObtenirCase
                (G,
                 ConstruireCoordonnees
                   (ObtenirLigne (ObtenirCoordonnee (C)) +
                    ValeurOrientation (O),
                    ObtenirColonne (ObtenirCoordonnee (C))));
         end if;
      end if;
   end ObtenirSuivant;

   ------------------
   -- modifierCase --
   ------------------

   function modifierCase
     (G : in Type_Grille; C : in Type_CaseHashi) return Type_Grille
   is
      Grid : Type_Grille;
   begin
      Grid := G;
      Grid.g
        (ObtenirLigne (ObtenirCoordonnee (C)),
         ObtenirColonne (ObtenirCoordonnee (C))) :=
        C;
      return Grid;
   end modifierCase;

end Grille;
